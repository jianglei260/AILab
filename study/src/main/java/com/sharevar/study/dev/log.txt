<html>
<head>
<link rel="stylesheet" href="file:/var/folders/sp/qjl55l_n4_xdxrqdns4yj8mw0000gn/T/multimarkdown_layout.css">
<style>

body.multimarkdown-preview,
body.multimarkdown-wiki-preview {
    font-size: 11px;
}
</style>
<link rel="stylesheet" href="file:/var/folders/sp/qjl55l_n4_xdxrqdns4yj8mw0000gn/T/multimarkdown_default.css">
</head>
<body class="multimarkdown-preview">
<div class="content">
<div class="page-header"><a href="https://github.com/hltj/kotlin-web-site-cn/blob/master/pages/docs/reference/basic-syntax.md" name="wikipage" id="wikipage" title="Click here to open the file on GitHub">basic syntax.md</a></div>
<div class="hr"></div>
<div class="hr"null>&nbsp;</div>
<h2 id="type-doclayout-referencecategory-basicstitle-基本语法"><a href="#type-doclayout-referencecategory-basicstitle-基本语法" name="type-doclayout-referencecategory-basicstitle-基本语法">type: doc
layout: reference
category: &quot;Basics&quot;
title: &quot;基本语法&quot;</a></h2>
<h1 id="基本语法"><a href="#基本语法" name="基本语法">基本语法</a></h1>
<h2 id="定义包"><a href="#定义包" name="定义包">定义包</a></h2>
<p>包的声明应处于源文件顶部：</p>
<pre><code class="kotlin">package my.demo

import java.util.*

// ……
</code></pre>
<p>目录与包的结构无需匹配：源代码可以在文件系统的任意位置。</p>
<p>参见<a href="packages.html">包</a>。</p>
<h2 id="定义函数"><a href="#定义函数" name="定义函数">定义函数</a></h2>
<p>带有两个 <code>Int</code> 参数、返回 <code>Int</code> 的函数：</p>
<div class="sample" markdown="1">
<pre><code class="kotlin"><span class="selection-highlight">//sampleStart
fun sum(a: Int, b: Int): Int {
    return a + b
}
//sampleEnd

fun main(args: Array<String>) {
    print("sum of 3 and 5 is ")
    println(sum(3, 5))
}
</span></code></pre>
</div>
<p>将表达式作为函数体、返回值类型自动推断的函数：</p>
<div class="sample" markdown="1">
<pre><code class="kotlin">//sampleStart
fun sum(a: Int, b: Int) = a + b
//sampleEnd

fun main(args: Array<String>) {
    println("sum of 19 and 23 is ${sum(19, 23)}")
}
</code></pre>
</div>
<p>函数返回无意义的值：</p>
<div class="sample" markdown="1">
<pre><code class="kotlin">//sampleStart
fun printSum(a: Int, b: Int): Unit {
    println("sum of $a and $b is ${a + b}")
}
//sampleEnd

fun main(args: Array<String>) {
    printSum(-1, 8)
}
</code></pre>
</div>
<p><code>Unit</code> 返回类型可以省略：</p>
<div class="sample" markdown="1">
<pre><code class="kotlin">//sampleStart
fun printSum(a: Int, b: Int) {
    println("sum of $a and $b is ${a + b}")
}
//sampleEnd

fun main(args: Array<String>) {
    printSum(-1, 8)
}
</code></pre>
</div>
<p>参见<a href="functions.html">函数</a>。</p>
<h2 id="定义变量"><a href="#定义变量" name="定义变量">定义变量</a></h2>
<p>一次赋值（只读）的局部变量:</p>
<div class="sample" markdown="1">
<pre><code class="kotlin">fun main(args: Array<String>) {
//sampleStart
    val a: Int = 1  // 立即赋值
    val b = 2   // 自动推断出 `Int` 类型
    val c: Int  // 如果没有初始值类型不能省略
    c = 3       // 明确赋值
//sampleEnd
    println("a = $a, b = $b, c = $c")
}
</code></pre>
</div>
<p>可变变量：</p>
<div class="sample" markdown="1">
<pre><code class="kotlin">fun main(args: Array<String>) {
//sampleStart
    var x = 5 // 自动推断出 `Int` 类型
    x += 1
//sampleEnd
    println("x = $x")
}
</code></pre>
</div>
<p>顶层变量：</p>
<div class="sample" markdown="1">
``` kotlin
//sampleStart
val PI = 3.14
var x = 0
<p>fun incrementX() {
x += 1
}
//sampleEnd</p>
<p>fun main(args: Array<String>) {
println(&quot;x = $x; PI = $PI&quot;)
incrementX()
println(&quot;incrementX()&quot;)
println(&quot;x = $x; PI = $PI&quot;)
}</p>
<pre><code></div>

参见[属性和字段](properties.html)。


## 注释

正如 Java 和 JavaScript，Kotlin 支持行注释及块注释。

``` kotlin
// 这是一个行注释

/* 这是一个多行的
   块注释。 */
</code></pre>
<p>与 Java 不同的是，Kotlin 的块注释可以嵌套。</p>
<p>参见<a href="kotlin-doc.html">编写 Kotlin 代码文档</a> 查看关于文档注释语法的信息。</p>
<h2 id="使用字符串模板"><a href="#使用字符串模板" name="使用字符串模板">使用字符串模板</a></h2>
<div class="sample" markdown="1">
<pre><code class="kotlin">fun main(args: Array<String>) {
//sampleStart
    var a = 1
    // 模板中的简单名称：
    val s1 = "a is $a"

    a = 2
    // 模板中的任意表达式：
    val s2 = "${s1.replace("is", "was")}, but now is $a"
//sampleEnd
    println(s2)
}
</code></pre>
</div>
<p>参见<a href="basic-types.html#字符串模板">字符串模板</a>。</p>
<h2 id="使用条件表达式"><a href="#使用条件表达式" name="使用条件表达式">使用条件表达式</a></h2>
<div class="sample" markdown="1">
<pre><code class="kotlin">//sampleStart
fun maxOf(a: Int, b: Int): Int {
    if (a > b) {
        return a
    } else {
        return b
    }
}
//sampleEnd

fun main(args: Array<String>) {
    println("max of 0 and 42 is ${maxOf(0, 42)}")
}
</code></pre>
</div>
<p>使用 <em>if</em>{: .keyword } 作为表达式:</p>
<div class="sample" markdown="1">
<pre><code class="kotlin">//sampleStart
fun maxOf(a: Int, b: Int) = if (a > b) a else b
//sampleEnd

fun main(args: Array<String>) {
    println("max of 0 and 42 is ${maxOf(0, 42)}")
}
</code></pre>
</div>
<p>参见<a href="control-flow.html#if-表达式"><em>if</em>{: .keyword } 表达式</a>。</p>
<h2 id="使用可空值及-null-keyword--检测"><a href="#使用可空值及-null-keyword--检测" name="使用可空值及-null-keyword--检测">使用可空值及 <em>null</em>{: .keyword } 检测</a></h2>
<p>当某个变量的值可以为 <em>null</em>{: .keyword } 的时候，必须在声明处的类型后添加 <code>?</code> 来标识该引用可为空。</p>
<p>如果 <code>str</code> 的内容不是数字返回 <em>null</em>{: .keyword }：</p>
<pre><code class="kotlin">fun parseInt(str: String): Int? {
    // ……
}
</code></pre>
<p>使用返回可空值的函数:</p>
<div class="sample" markdown="1" data-min-compiler-version="1.1">
<pre><code class="kotlin">fun parseInt(str: String): Int? {
    return str.toIntOrNull()
}

//sampleStart
fun printProduct(arg1: String, arg2: String) {
    val x = parseInt(arg1)
    val y = parseInt(arg2)

    // 直接使用 `x * y` 会导致编译错误，因为他们可能为 null
    if (x != null && y != null) {
        // 在空检测后，x 和 y 会自动转换为非空值（non-nullable）
        println(x * y)
    }
    else {
        println("either '$arg1' or '$arg2' is not a number")
    }
}
//sampleEnd


fun main(args: Array<String>) {
    printProduct("6", "7")
    printProduct("a", "7")
    printProduct("a", "b")
}
</code></pre>
</div>
<p>或者</p>
<div class="sample" markdown="1" data-min-compiler-version="1.1">
<pre><code class="kotlin">fun parseInt(str: String): Int? {
    return str.toIntOrNull()
}

fun printProduct(arg1: String, arg2: String) {
    val x = parseInt(arg1)
    val y = parseInt(arg2)

//sampleStart
    // ……
    if (x == null) {
        println("Wrong number format in arg1: '$arg1'")
        return
    }
    if (y == null) {
        println("Wrong number format in arg2: '$arg2'")
        return
    }

    // 在空检测后，x 和 y 会自动转换为非空值
    println(x * y)
//sampleEnd
}

fun main(args: Array<String>) {
    printProduct("6", "7")
    printProduct("a", "7")
    printProduct("99", "b")
}
</code></pre>
</div>
<p>参见<a href="null-safety.html">空安全</a>。</p>
<h2 id="使用类型检测及自动类型转换"><a href="#使用类型检测及自动类型转换" name="使用类型检测及自动类型转换">使用类型检测及自动类型转换</a></h2>
<p><em>is</em>{: .keyword } 运算符检测一个表达式是否某类型的一个实例。
如果一个不可变的局部变量或属性已经判断出为某类型，那么检测后的分支中可以直接当作该类型使用，无需显式转换：</p>
<div class="sample" markdown="1">
<pre><code class="kotlin">//sampleStart
fun getStringLength(obj: Any): Int? {
    if (obj is String) {
        // `obj` 在该条件分支内自动转换成 `String`
        return obj.length
    }

    // 在离开类型检测分支后，`obj` 仍然是 `Any` 类型
    return null
}
//sampleEnd


fun main(args: Array<String>) {
    fun printLength(obj: Any) {
        println("'$obj' string length is ${getStringLength(obj) ?: "... err, not a string"} ")
    }
    printLength("Incomprehensibilities")
    printLength(1000)
    printLength(listOf(Any()))
}
</code></pre>
</div>
<p>或者</p>
<div class="sample" markdown="1">
<pre><code class="kotlin">//sampleStart
fun getStringLength(obj: Any): Int? {
    if (obj !is String) return null

    // `obj` 在这一分支自动转换为 `String`
    return obj.length
}
//sampleEnd


fun main(args: Array<String>) {
    fun printLength(obj: Any) {
        println("'$obj' string length is ${getStringLength(obj) ?: "... err, not a string"} ")
    }
    printLength("Incomprehensibilities")
    printLength(1000)
    printLength(listOf(Any()))
}
</code></pre>
</div>
<p>甚至</p>
<div class="sample" markdown="1">
<pre><code class="kotlin">//sampleStart
fun getStringLength(obj: Any): Int? {
    // `obj` 在 `&&` 右边自动转换成 `String` 类型
    if (obj is String && obj.length > 0) {
      return obj.length
    }

    return null
}
//sampleEnd


fun main(args: Array<String>) {
    fun printLength(obj: Any) {
        println("'$obj' string length is ${getStringLength(obj) ?: "... err, is empty or not a string at all"} ")
    }
    printLength("Incomprehensibilities")
    printLength("")
    printLength(1000)
}
</code></pre>
</div>
<p>参见<a href="classes.html">类</a> 和 <a href="typecasts.html">类型转换</a>。</p>
<h2 id="使用--循环"><a href="#使用--循环" name="使用--循环">使用 <code>for</code> 循环</a></h2>
<div class="sample" markdown="1">
<pre><code class="kotlin">fun main(args: Array<String>) {
//sampleStart
    val items = listOf("apple", "banana", "kiwifruit")
    for (item in items) {
        println(item)
    }
//sampleEnd
}
</code></pre>
</div>
<p>或者</p>
<div class="sample" markdown="1">
<pre><code class="kotlin">fun main(args: Array<String>) {
//sampleStart
    val items = listOf("apple", "banana", "kiwifruit")
    for (index in items.indices) {
        println("item at $index is ${items[index]}")
    }
//sampleEnd
}
</code></pre>
</div>
<p>参见 <a href="control-flow.html#for-循环">for 循环</a>。</p>
<h2 id="使用--循环-1"><a href="#使用--循环-1" name="使用--循环-1">使用 <code>while</code> 循环</a></h2>
<div class="sample" markdown="1">
<pre><code class="kotlin">fun main(args: Array<String>) {
//sampleStart
    val items = listOf("apple", "banana", "kiwifruit")
    var index = 0
    while (index < items.size) {
        println("item at $index is ${items[index]}")
        index++
    }
//sampleEnd
}
</code></pre>
</div>
<p>参见 <a href="control-flow.html#while-循环">while 循环</a>。</p>
<h2 id="使用--表达式"><a href="#使用--表达式" name="使用--表达式">使用 <code>when</code> 表达式</a></h2>
<div class="sample" markdown="1">
<pre><code class="kotlin">//sampleStart
fun describe(obj: Any): String =
    when (obj) {
        1          -> "One"
        "Hello"    -> "Greeting"
        is Long    -> "Long"
        !is String -> "Not a string"
        else       -> "Unknown"
    }
//sampleEnd

fun main(args: Array<String>) {
    println(describe(1))
    println(describe("Hello"))
    println(describe(1000L))
    println(describe(2))
    println(describe("other"))
}
</code></pre>
</div>
<p>参见 <a href="control-flow.html#when-表达式">when 表达式</a>。</p>
<h2 id="使用区间range"><a href="#使用区间range" name="使用区间range">使用区间（range）</a></h2>
<p>使用 <em>in</em>{: .keyword } 运算符来检测某个数字是否在指定区间内：</p>
<div class="sample" markdown="1">
<pre><code class="kotlin">fun main(args: Array<String>) {
//sampleStart
    val x = 10
    val y = 9
    if (x in 1..y+1) {
        println("fits in range")
    }
//sampleEnd
}
</code></pre>
</div>
<p>检测某个数字是否在指定区间外:</p>
<div class="sample" markdown="1">
<pre><code class="kotlin">fun main(args: Array<String>) {
//sampleStart
    val list = listOf("a", "b", "c")

    if (-1 !in 0..list.lastIndex) {
        println("-1 is out of range")
    }
    if (list.size !in list.indices) {
        println("list size is out of valid list indices range too")
    }
//sampleEnd
}
</code></pre>
</div>
<p>区间迭代:</p>
<div class="sample" markdown="1">
<pre><code class="kotlin">fun main(args: Array<String>) {
//sampleStart
    for (x in 1..5) {
        print(x)
    }
//sampleEnd
}
</code></pre>
</div>
<p>或数列迭代：</p>
<div class="sample" markdown="1">
<pre><code class="kotlin">fun main(args: Array<String>) {
//sampleStart
    for (x in 1..10 step 2) {
        print(x)
    }
    println()
    for (x in 9 downTo 0 step 3) {
        print(x)
    }
//sampleEnd
}
</code></pre>
</div>
<p>参见<a href="ranges.html">区间</a>。</p>
<h2 id="使用集合"><a href="#使用集合" name="使用集合">使用集合</a></h2>
<p>对集合进行迭代:</p>
<div class="sample" markdown="1">
<pre><code class="kotlin">fun main(args: Array<String>) {
    val items = listOf("apple", "banana", "kiwifruit")
//sampleStart
    for (item in items) {
        println(item)
    }
//sampleEnd
}
</code></pre>
</div>
<p>使用 <em>in</em>{: .keyword } 运算符来判断集合内是否包含某实例：</p>
<div class="sample" markdown="1">
<pre><code class="kotlin">fun main(args: Array<String>) {
    val items = setOf("apple", "banana", "kiwifruit")
//sampleStart
    when {
        "orange" in items -> println("juicy")
        "apple" in items -> println("apple is fine too")
    }
//sampleEnd
}
</code></pre>
</div>
<p>使用 lambda 表达式来过滤（filter）和映射（map）集合：</p>
<div class="sample" markdown="1">
<pre><code class="kotlin">fun main(args: Array<String>) {
    val fruits = listOf("banana", "avocado", "apple", "kiwifruit")
//sampleStart
    fruits
        .filter { it.startsWith("a") }
        .sortedBy { it }
        .map { it.toUpperCase() }
        .forEach { println(it) }
//sampleEnd
}
</code></pre>
</div>
<p>参见<a href="lambdas.html">高阶函数及Lambda表达式</a>。</p>
<h2 id="创建基本类及其实例"><a href="#创建基本类及其实例" name="创建基本类及其实例">创建基本类及其实例：</a></h2>
<div class="sample" markdown="1">
<pre><code class="kotlin">fun main(args: Array<String>) {
//sampleStart
    val rectangle = Rectangle(5.0, 2.0) // 不需要“new”关键字
    val triangle = Triangle(3.0, 4.0, 5.0)
//sampleEnd
    println("Area of rectangle is ${rectangle.calculateArea()}, its perimeter is ${rectangle.perimeter}")
    println("Area of triangle is ${triangle.calculateArea()}, its perimeter is ${triangle.perimeter}")
}

abstract class Shape(val sides: List<Double>) {
    val perimeter: Double get() = sides.sum()
    abstract fun calculateArea(): Double
}

interface RectangleProperties {
    val isSquare: Boolean
}

class Rectangle(
    var height: Double,
    var length: Double
) : Shape(listOf(height, length, height, length)), RectangleProperties {
    override val isSquare: Boolean get() = length == height
    override fun calculateArea(): Double = height * length
}

class Triangle(
    var sideA: Double,
    var sideB: Double,
    var sideC: Double
) : Shape(listOf(sideA, sideB, sideC)) {
    override fun calculateArea(): Double {
        val s = perimeter / 2
        return Math.sqrt(s * (s - sideA) * (s - sideB) * (s - sideC))
    }
}
</code></pre>
</div>
<p>参见<a href="classes.html">类</a>以及<a href="object-declarations.html">对象与实例</a>。</p>
</div>
</body>
</html>
